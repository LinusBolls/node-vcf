"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.default=void 0;var _foldline=_interopRequireDefault(require("foldline"));var _property=_interopRequireDefault(require("./property"));var _parseLines=_interopRequireDefault(require("./parse-lines"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function vCard(){if(!(this instanceof vCard))return new vCard;this.version=vCard.versions[vCard.versions.length-1];this.data={}}vCard.mimeType="text/vcard";vCard.extension=".vcf";vCard.versions=["2.1","3.0","4.0"];vCard.EOL="\r\n";vCard.foldLine=_foldline.default;vCard.normalize=function(input){return(input+"").replace(/^[\s\r\n]+|[\s\r\n]+$/g,"").replace(/(\r\n)[\x09\x20]?(\r\n)|$/g,"$1").replace(/\r\n[\x20\x09]/g,"")};vCard.isSupported=function(version){return/^\d\.\d$/.test(version)&&vCard.versions.indexOf(version)!== -1};vCard.parse=function(value){const objects=(value+"").split(/(?=BEGIN\:VCARD)/gi);const cards=[];for(let i=0;i<objects.length;i++){cards.push(new vCard().parse(objects[i]))}return cards};vCard.parseLines=_parseLines.default;vCard.fromJSON=function(jcard){jcard=typeof jcard==="string"?JSON.parse(jcard):jcard;if(jcard==null||!Array.isArray(jcard))return new vCard;if(!/vcard/i.test(jcard[0]))throw new Error("Object not in jCard format");const card=new vCard;jcard[1].forEach(function(prop){card.addProperty(vCard.Property.fromJSON(prop))});return card};vCard.format=function(card,version){version=version||card.version||vCard.versions[vCard.versions.length-1];if(!vCard.isSupported(version))throw new Error('Unsupported vCard version "'+version+'"');const vcf=[];vcf.push("BEGIN:VCARD");vcf.push("VERSION:"+version);const props=Object.keys(card.data);let prop="";for(let i=0;i<props.length;i++){if(props[i]==="version")continue;prop=card.data[props[i]];if(Array.isArray(prop)){for(let k=0;k<prop.length;k++){if(prop[k].isEmpty())continue;vcf.push(vCard.foldLine(prop[k].toString(version),75))}}else if(!prop.isEmpty()){vcf.push(vCard.foldLine(prop.toString(version),75))}}vcf.push("END:VCARD");return vcf.join(vCard.EOL)};vCard.Property=_property.default;vCard.prototype={constructor:vCard,get:function(key){if(this.data[key]==null){return this.data[key]}if(Array.isArray(this.data[key])){return this.data[key].map(function(prop){return prop.clone()})}else{return this.data[key].clone()}},set:function(key,value,params){return this.setProperty(new vCard.Property(key,value,params))},add:function(key,value,params){const prop=new vCard.Property(key,value,params);this.addProperty(prop);return this},setProperty:function(prop){this.data[prop._field]=prop;return this},addProperty:function(prop){const key=prop._field;if(Array.isArray(this.data[key])){this.data[key].push(prop)}else if(this.data[key]!=null){this.data[key]=[this.data[key],prop]}else{this.data[key]=prop}return this},parse:function(value){const lines=vCard.normalize(value).split(/\r\n/g);const begin=lines[0];let version=lines[1];const end=lines[lines.length-1];const regexp_version=/VERSION:\d\.\d/i;if(!/BEGIN:VCARD/i.test(begin))throw new SyntaxError('Invalid vCard: Expected "BEGIN:VCARD" but found "'+begin+'"');if(!/END:VCARD/i.test(end))throw new SyntaxError('Invalid vCard: Expected "END:VCARD" but found "'+end+'"');if(!regexp_version.test(version)){if(!(version=lines.find(line=>regexp_version.test(line))))throw new SyntaxError('Invalid vCard: Expected "VERSION:\\d.\\d" but none found')}this.version=version.substring(8,11);if(!vCard.isSupported(this.version))throw new Error('Unsupported version "'+this.version+'"');this.data=vCard.parseLines(lines);return this},toString:function(version,charset){version=version||this.version;return vCard.format(this,version)},toJCard:function(version){version=version||"4.0";const keys=Object.keys(this.data);const data=[["version",{},"text",version]];let prop=null;for(let i=0;i<keys.length;i++){if(keys[i]==="version")continue;prop=this.data[keys[i]];if(Array.isArray(prop)){for(let k=0;k<prop.length;k++){data.push(prop[k].toJSON())}}else{data.push(prop.toJSON())}}return["vcard",data]},toJSON:function(){return this.toJCard(this.version)}};var _default=vCard;exports.default=_default
//# sourceMappingURL=data:application/json;base64,